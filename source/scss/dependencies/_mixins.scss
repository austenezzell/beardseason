@mixin breakpoint($class) {
  // 'xs' (< 544px) is default

  @if $class == xs {
     @content;
  }

  @else if $class == sm {
    @media (min-width: map_get($grid-breakpoints, sm)) { @content; }
  }

  @else if $class == md {
    @media (min-width: map_get($grid-breakpoints, md)) { @content; }
  }

  @else if $class == lg {
    @media (min-width: map_get($grid-breakpoints, lg)) { @content; }
  }

  @else if $class == xl {
    @media (min-width: map_get($grid-breakpoints, xl)) { @content; }
  }

  @else if $class == xxl {
    @media (min-width: map_get($grid-breakpoints, xxl)) { @content; }
  }

  @else {
    @warn "breakpoint mixin supports: xs, sm, md, lg, xl, xxl";
  }
}

// usage: @include font-size(24) = font-size: 32px;
// @mixin font-size($sizeValue: 16) {
//   font-size: ($sizeValue / 10) + rem;
// }

@mixin font-size($map, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $font-size in $map {
    @if $breakpoint == default {
      font-size: ($font-size / 10) + rem;
    }
    @else {
      // If $font-size is a key that exists in
      // $breakpoints, use the value
      @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint: map-get($breakpoints, $breakpoint);
      }
      @media screen and (min-width: $breakpoint) {
        font-size: ($font-size / 10) + rem;
      }
    }
  }
}

@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

@mixin regular-font() {
  font-family: "pt-sans-regular", sans-serif;
  font-style: normal;
  font-weight: 400;
}

@mixin bold-font() {
  font-family: "pt-sans-bold", sans-serif;
  font-style: normal;
  font-weight: 500;
}

// Extends
%hide-text {
  text-indent: -99999px;
  direction: ltr;
}

%visually-hidden {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}

%clearfix {
  *zoom: 1;
  &:before {
    content: " ";
    display: table;
  }
  &:after {
    content: " ";
    display: table;
    clear: both;
  }
}

// Prefer 'margin: auto' in a flex container
%vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}
